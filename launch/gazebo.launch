<launch>

    <arg name="use_sim_time" default="true"/>
    <arg name="drive_type" default="4wis"/><!-- diff_drive, mecanum, ackermann_front, ackermann_rear, 4wis-->
    <arg name="use_arms" default="true"/>
    <arg name="world" default="$(find xmobot)/worlds/xmobot.world"/>

    <!-- 加载robot_description -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find xmobot)/urdf/xmobot.urdf.xacro' use_mesh:=false drive_type:=$(arg drive_type) use_arms:=$(arg use_arms)"/>

    <!-- 启动controller manager (base_gazebo.yaml加载控制器) -->
    <rosparam file="$(find xmobot)/config/base_gazebo.yaml" command="load"/>

    <!-- 启动Gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="paused" value="false"/>
        <arg name="gui" value="true"/>
        <arg name="headless" value="false"/>
        <arg name="debug" value="false"/>
    </include>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"  respawn="false" output="screen"
          args="-param robot_description -urdf -model xmobot -x 0.0 -y 0.0 -z 0.05"/>

    <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen" ns="/"
          args="joint_state_controller" />

    <!-- 动态根据drive_type判断启动哪些steering controller-->
    <group if="$(eval drive_type == 'diff_drive')">
        <node name="controller_spawner_diff" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/"
              args="diff_drive_controller"/>
    </group>

    <group if="$(eval drive_type == 'ackermann_front')">
        <node name="controller_spawner_front" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/"
              args="velocity_controller front_left_steering_controller front_right_steering_controller"/>
    </group>

    <group if="$(eval drive_type == 'ackermann_rear')">
        <node name="controller_spawner_rear" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/"
              args="velocity_controller rear_left_steering_controller rear_right_steering_controller"/>
    </group>

    <group if="$(eval drive_type == '4wis')">
        <node name="controller_spawner_all" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/"
              args="velocity_controller front_left_steering_controller front_right_steering_controller rear_left_steering_controller rear_right_steering_controller"/>
    </group>

    <group if="$(arg use_arms)">
        <rosparam file="$(find xmobot)/config/arm_gazebo.yaml" command="load"/>
        <node name="controller_arms" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/"
              args="arm_trajectory_controller left_gripper_controller right_gripper_controller"/>
    </group>

    <!-- 发布joint_states -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"/>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" respawn="true" output="screen"/>

    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find xmobot)/rviz/xmobot_display.rviz"/>

</launch>
